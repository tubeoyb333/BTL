import tkinter as tk
from tkinter import ttk, simpledialog, messagebox
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import sympy as sp
import numpy as np

class MathExpression:
    def __init__(self, expression_str):
        self.expression_str = expression_str
        self.x = sp.symbols('x')

        try:
            # Tạo đối tượng biểu thức toán học từ chuỗi đầu vào
            self.expression = sp.sympify(expression_str)
        except Exception as e:
            raise ValueError(f"Lỗi: {str(e)}")

class MathAppGUI:
    def __init__(self, master):
        self.master = master
        self.master.title("Math Functions GUI")

        # Tạo giao diện người dùng
        self.create_widgets()

    def create_widgets(self):
        # Tạo nhãn và ô nhập liệu cho hàm số
        ttk.Label(self.master, text="Nhập hàm số (sử dụng 'x' là biến):").grid(row=0, column=0, pady=10, padx=10, sticky=tk.W)
        self.entry_function = ttk.Entry(self.master, width=50)
        self.entry_function.grid(row=0, column=1, pady=10, padx=10, columnspan=2)

        # Tạo các nút chức năng và gán hàm xử lý tương ứng
        functions = {
            "Tính Đạo Hàm": self.calculate_derivative,
            "Vẽ Đồ Thị": self.plot_graph,
            "Tính Nguyên Hàm": self.calculate_integral,
            "Giải Phương Trình": self.solve_equation,
            "Tính Diện Tích": self.calculate_area,
            "Tìm Điểm Cực Trị": self.find_extreme_points,
            "Tính Diện Tích Hai Hàm": self.calculate_area_between_functions,
            "Kiểm Tra Tính Liên Tục": self.check_continuity
        }

        row_index = 2
        for text, command in functions.items():
            ttk.Button(self.master, text=text, command=command).grid(row=row_index, column=0, pady=5, padx=5)
            row_index += 1

        # Tạo nhãn hiển thị kết quả
        self.result_label = ttk.Label(self.master, text="", wraplength=400)
        self.result_label.grid(row=row_index, column=0, pady=10, padx=10, columnspan=3, rowspan=2, sticky=tk.W + tk.E)

        # Khởi tạo biểu thức toán học
        self.math_expression = None

    def get_expression(self):
        # Lấy thông tin hàm số từ ô nhập liệu
        expression_str = self.entry_function.get()
        try:
            self.math_expression = MathExpression(expression_str)
        except ValueError as ve:
            self.show_error(str(ve))
            return None
        return self.math_expression.x, self.math_expression.expression

    def calculate_derivative(self):
        # Tính đạo hàm
        expression_info = self.get_expression()
        if expression_info:
            x, expression = expression_info
            try:
                n = self.get_single_value("Bậc của đạo hàm cần tính:")
                derivate = sp.diff(expression, x, n)
                self.show_result(f"Đạo hàm bậc {n}: {derivate}")
            except ValueError:
                self.show_error("Vui lòng nhập một số nguyên làm bậc của đạo hàm.")

    def plot_graph(self):
        # Vẽ đồ thị hàm số
        expression_info = self.get_expression()
        if expression_info:
            x, expression = expression_info
            x_vals = np.linspace(-10, 10, 1000)
            y_vals = [expression.subs(x, val) for val in x_vals]

            figure = Figure(figsize=(5, 4), dpi=100)
            plot = figure.add_subplot(1, 1, 1)
            plot.plot(x_vals, y_vals)
            plot.set_title("Đồ thị hàm số")
            plot.set_xlabel("x")
            plot.set_ylabel("f(x)")

            canvas = FigureCanvasTkAgg(figure, master=self.master)
            canvas.draw()
            canvas.get_tk_widget().grid(row=1, column=1, rowspan=8, pady=5, padx=5, columnspan=2)

    # Các hàm xử lý chức năng khác được thêm comment giải thích tương tự

    def show_result(self, message):
        # Hiển thị kết quả
        self.result_label.config(text=message)

    def show_error(self, message):
        # Hiển thị thông báo lỗi
        messagebox.showerror("Lỗi", message)

    # Các hàm utility để lấy giá trị, khoảng giá trị, v.v.

def main():
    # Hàm chính để chạy ứng dụng
    root = tk.Tk()
    app = MathAppGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()
